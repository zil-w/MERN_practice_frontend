import React, {useState, useEffect} from 'react'
import EntriesDisplay from './entriesDisplay'
import NewEntryForm from './newEntryForm'
import NameFilter from './nameFilter'
import phoneServices from './phoneServices'
import SubmitMessage from './submitMessage'

const App = () => {
    const [ persons, setPersons ] = useState([]) //e.g.  [{ name: 'Arto Hellas', number: '040-123456', id: '0'}...]
    //const [lastIndex, setLastIndex] = useState(0) //no longer needed since mongoDB
    const [newName, setNewName ] = useState('')
    const [newPhoneNum, setPhoneNum] = useState('')
    const [searchTerm, setSearchTerm] = useState('')
    const [messageStatus, setMessageStatus] = useState(null)

    useEffect(()=>{//okay it seems like this is just called once when the app is rendered, and the app is re-rendered once the promise is fufilled
        phoneServices
        .getAllNumbers()
        .then(numbers =>{
            setPersons(numbers)
            // if(numbers.length>0){ //no longer needed since mongoDB
            //     setLastIndex(numbers[numbers.length-1].id)
            // }
        })
    },[])

    const nameChange = (event) =>{
        setNewName(event.target.value)
    }

    const phoneChange = (event) =>{
        setPhoneNum(event.target.value)
    }

    const searchTermChange = (event)=>{
        setSearchTerm(event.target.value.toLowerCase())
    }

    const inputTermsReset = () => {
        setNewName('')
        setPhoneNum('')
    }

    const submissionHandler = (event) =>{
        event.preventDefault()
        const existingEntry = persons.find(person => person.name === newName.trim())

        if( existingEntry === undefined){
            //Okay by 3.13, even before then, we no longer need to specify ID, as it's automatically generated by mongoDB
            const newEntry = {name: newName.trim(), number: newPhoneNum}
            phoneServices
            .addNumber(newEntry)
            .then(idJSON =>{ //dunno if this will work let's see
                setPersons(persons.concat({...newEntry, id:idJSON.id}))
                //setLastIndex(lastIndex+1)
                setMessageStatus({isError: false, message: `${newName} has been successfully added!`})
                setTimeout(()=>setMessageStatus(null), 3000)
                inputTermsReset()
            })
            .catch(err=>{
                //console.log('addition failed ', err, '  properties ', Object.keys(err))
                setMessageStatus({isError: true, message: err.response.data.error})
                setTimeout(()=>setMessageStatus(null), 3000)
            })
        }
        else{
            const overwriteMsg = `${newName} is already in the phonebook. Would you like to overwrite their info?`
            const doOverwrite = window.confirm(overwriteMsg)
            if(doOverwrite){
                phoneServices
                .modifyNumber(existingEntry.id, {...existingEntry, number: newPhoneNum})
                .then(changedEntry => {
                    setPersons(persons.map(person => (person.id === existingEntry.id)? changedEntry: person))
                    setMessageStatus({isError: false, message: `${newName}'s number has been updated!`})
                    setTimeout(()=>setMessageStatus(null), 3000)
                    inputTermsReset()
                })
                .catch(err=>{
                    console.log('addition failed ', err)
                    setMessageStatus({isError: true, message: err.response.data.error})
                    setTimeout(()=>setMessageStatus(null), 3000)
                })
            }
        }
    }

    const deletionHandler = (name, id) =>{
            const message = `Are you sure that you want to delete ${name}?`
            const doDelete = window.confirm(message)
            if(doDelete){
                phoneServices
                .deleteNumber(id)
                .then(entry =>{
                    const updatePersons = persons.filter(person => person.id !== id)
                    setPersons(updatePersons)
                    // if(id === lastIndex && updatePersons.length>0){ //no longer needed since mongoDB
                    //     setLastIndex(updatePersons[updatePersons.length-1].id)
                    // }
                    // else if(updatePersons.length === 0){
                    //     setLastIndex(0)
                    // }
                    setMessageStatus({isError: false, message: `${name} has been deleted!`})
                    setTimeout(()=>setMessageStatus(null), 3000)
                })
                .catch(error =>{
                    console.log('deletion failed ', error)
                    setMessageStatus({isError: true, message: `${name} has already been deleted!`})
                    setTimeout(()=>setMessageStatus(null), 3000)
                })
            }
    }
  
    return (
      <div>
        <h2>Phonebook</h2>
        <SubmitMessage messageStatus = {messageStatus}/>
        <NameFilter searchTerm ={searchTerm} onChange={searchTermChange} />
        <NewEntryForm 
            submissionHandler = {submissionHandler}
            newName = {newName}
            nameChange = {nameChange}
            newPhoneNum = {newPhoneNum}
            phoneChange ={phoneChange}
        />
        <h2>Numbers</h2>
        <EntriesDisplay searchTerm = {searchTerm} entries ={persons} deletionHandler = {deletionHandler}/>
      </div>
    )
  }
  
  export default App